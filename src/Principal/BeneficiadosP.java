/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Principal;

import Clases.BecaAlimenticia;
import Clases.Conexion;
import Clases.PlanAlimenticio;
import javax.swing.JOptionPane;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Reymundo Tenorio
 */
public class BeneficiadosP extends javax.swing.JFrame {

    /**
     * Creates new form Estudiante
     */
    public BeneficiadosP() {
        initComponents();
       jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
       jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        TabbedPane = new org.edisoncor.gui.tabbedPane.TabbedPaneHeader();
        PanelVer = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbbusc = new javax.swing.JComboBox();
        btnbuscar = new javax.swing.JButton();
        txtbusc = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        btndelete = new javax.swing.JButton();
        btnshowall = new javax.swing.JButton();
        btnprint = new javax.swing.JButton();
        btncancel3 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jLblFoto1 = new javax.swing.JLabel();
        PanelVer1 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cmbbusc1 = new javax.swing.JComboBox();
        btnbuscar1 = new javax.swing.JButton();
        txtbusc1 = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        btndelete1 = new javax.swing.JButton();
        btnshowall1 = new javax.swing.JButton();
        btnprint1 = new javax.swing.JButton();
        btncancel4 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jLblFoto2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Beneficiados");
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        TabbedPane.setBackground(new java.awt.Color(0, 204, 204));
        TabbedPane.setColorDeBorde(new java.awt.Color(0, 204, 204));
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TabbedPaneMousePressed(evt);
            }
        });
        TabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TabbedPaneStateChanged(evt);
            }
        });

        PanelVer.setBackground(new java.awt.Color(235, 235, 150));
        PanelVer.setLayout(new javax.swing.BoxLayout(PanelVer, javax.swing.BoxLayout.LINE_AXIS));

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(235, 235, 150));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Estudiante", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscar Por: ");

        cmbbusc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbbusc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. Carn√©", "Nombres del Estudiante", "Apellidos del Ejecutivo", "Sexo", "Facultad", "Carrera", "Estado", "Inasistencias" }));
        cmbbusc.setToolTipText("Buscar Por:");

        btnbuscar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnbuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnbuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnbuscar.setMnemonic('b');
        btnbuscar.setText("Buscar");
        btnbuscar.setToolTipText("Buscar Agente Vendedor");
        btnbuscar.setContentAreaFilled(false);
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        txtbusc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbuscKeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();

        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));

        ModeloAutoCompletar modelo1 = new ModeloVendNames();

        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));

        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });

        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar)
                    .addComponent(txtbusc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setToolTipText("Lista de Agentes Vendedores");
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable1FocusLost(evt);
            }
        });
        jScrollPane5.setViewportView(jTable1);

        jPanel7.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel5.setBackground(new java.awt.Color(0, 102, 153));

        btndelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btndelete.setForeground(new java.awt.Color(255, 255, 255));
        btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png"))); // NOI18N
        btndelete.setMnemonic('A');
        btndelete.setText("Activar");
        btndelete.setToolTipText("Activar/Desactivar Estudiante Seleccionado");
        btndelete.setContentAreaFilled(false);
        btndelete.setEnabled(false);
        btndelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btndelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });
        btndelete.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btndeleteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btndeleteFocusLost(evt);
            }
        });
        jPanel5.add(btndelete);

        btnshowall.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tablatodos.png"))); // NOI18N
        btnshowall.setMnemonic('m');
        btnshowall.setText("Mostrar Todos");
        btnshowall.setToolTipText("Mostrar Todos Los Estudiantes");
        btnshowall.setContentAreaFilled(false);
        btnshowall.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowallActionPerformed(evt);
            }
        });
        jPanel5.add(btnshowall);

        btnprint.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint.setForeground(new java.awt.Color(255, 255, 255));
        btnprint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint.setMnemonic('i');
        btnprint.setText("Imprimir");
        btnprint.setToolTipText("Imprimir/Mostrar Reporte de Estudiantes");
        btnprint.setContentAreaFilled(false);
        btnprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprintActionPerformed(evt);
            }
        });
        jPanel5.add(btnprint);

        btncancel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel3.setForeground(new java.awt.Color(255, 255, 255));
        btncancel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel3.setMnemonic('c');
        btncancel3.setText("Cancelar");
        btncancel3.setToolTipText("Cancelar / Salir");
        btncancel3.setContentAreaFilled(false);
        btncancel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel3ActionPerformed(evt);
            }
        });
        jPanel5.add(btncancel3);

        jPanel7.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a Estudiante", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel11.setOpaque(false);

        jLblFoto1.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.add(jPanel11, java.awt.BorderLayout.EAST);

        PanelVer.add(jPanel7);

        TabbedPane.addTab("Ver Estudiantes Con Beca Alimenticia", PanelVer);

        PanelVer1.setBackground(new java.awt.Color(235, 235, 150));
        PanelVer1.setLayout(new javax.swing.BoxLayout(PanelVer1, javax.swing.BoxLayout.LINE_AXIS));

        jPanel8.setBackground(new java.awt.Color(0, 153, 204));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel6.setBackground(new java.awt.Color(235, 235, 150));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar Trabajador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel6.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Buscar Por: ");

        cmbbusc1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbbusc1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No. Carn√©", "Nombres del Trabajador", "Apellidos del Trabajador", "No. C√©dula del Trabajador", "Sexo", "Puesto", "Estado", "Plan Alimenticio" }));
        cmbbusc1.setToolTipText("Buscar Por:");

        btnbuscar1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnbuscar1.setForeground(new java.awt.Color(255, 255, 255));
        btnbuscar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Buscar_1.png"))); // NOI18N
        btnbuscar1.setMnemonic('b');
        btnbuscar1.setText("Buscar");
        btnbuscar1.setToolTipText("Buscar Agente Vendedor");
        btnbuscar1.setContentAreaFilled(false);
        btnbuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar1ActionPerformed(evt);
            }
        });

        txtbusc1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbusc1KeyReleased(evt);
            }
        });
        /*txtbusc = new AutoComplete.AutoCompletar();

        ((AutoCompletar)txtbusc).setDesplegable(new DesplegableJPopUPMenu(txtbusc));

        ModeloAutoCompletar modelo1 = new ModeloVendNames();

        ((AutoCompletar)txtbusc).setModelo(modelo1);
        ((AutoCompletar)txtbusc).getDesplegable().setForeground(new Color(102,153,255));

        ((AutoCompletar)txtbusc).addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtbuscTyped(evt);
            }
        });

        ((AutoCompletar)txtbusc).setToolTipText("Ingresar Dato a Buscar");*/

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cmbbusc1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtbusc1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnbuscar1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbbusc1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar1)
                    .addComponent(txtbusc1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel8.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setToolTipText("Lista de Agentes Vendedores");
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
        });
        jTable2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTable2FocusLost(evt);
            }
        });
        jScrollPane6.setViewportView(jTable2);

        jPanel8.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jPanel9.setBackground(new java.awt.Color(0, 102, 153));

        btndelete1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btndelete1.setForeground(new java.awt.Color(255, 255, 255));
        btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png"))); // NOI18N
        btndelete1.setMnemonic('A');
        btndelete1.setText("Activar");
        btndelete1.setToolTipText("Activar/Desactivar Estudiante Seleccionado");
        btndelete1.setContentAreaFilled(false);
        btndelete1.setEnabled(false);
        btndelete1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btndelete1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btndelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndelete1ActionPerformed(evt);
            }
        });
        btndelete1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btndelete1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                btndelete1FocusLost(evt);
            }
        });
        jPanel9.add(btndelete1);

        btnshowall1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnshowall1.setForeground(new java.awt.Color(255, 255, 255));
        btnshowall1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tablatodos.png"))); // NOI18N
        btnshowall1.setMnemonic('m');
        btnshowall1.setText("Mostrar Todos");
        btnshowall1.setToolTipText("Mostrar Todos Los Estudiantes");
        btnshowall1.setContentAreaFilled(false);
        btnshowall1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnshowall1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnshowall1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnshowall1ActionPerformed(evt);
            }
        });
        jPanel9.add(btnshowall1);

        btnprint1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnprint1.setForeground(new java.awt.Color(255, 255, 255));
        btnprint1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Imprimir.png"))); // NOI18N
        btnprint1.setMnemonic('i');
        btnprint1.setText("Imprimir");
        btnprint1.setToolTipText("Imprimir/Mostrar Reporte de Estudiantes");
        btnprint1.setContentAreaFilled(false);
        btnprint1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnprint1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnprint1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnprint1ActionPerformed(evt);
            }
        });
        jPanel9.add(btnprint1);

        btncancel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btncancel4.setForeground(new java.awt.Color(255, 255, 255));
        btncancel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Cancelar.png"))); // NOI18N
        btncancel4.setMnemonic('c');
        btncancel4.setText("Cancelar");
        btncancel4.setToolTipText("Cancelar / Salir");
        btncancel4.setContentAreaFilled(false);
        btncancel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btncancel4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btncancel4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancel4ActionPerformed(evt);
            }
        });
        jPanel9.add(btncancel4);

        jPanel8.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fotograf√≠a Trabajador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(204, 204, 204))); // NOI18N
        jPanel12.setOpaque(false);

        jLblFoto2.setForeground(new java.awt.Color(235, 235, 150));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLblFoto2, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel8.add(jPanel12, java.awt.BorderLayout.EAST);

        PanelVer1.add(jPanel8);

        TabbedPane.addTab("Ver Trabajadores Con Plan Alimenticio", PanelVer1);

        getContentPane().add(TabbedPane, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1209, 722));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    private MenuPrincipal MP;

    public void setMP(MenuPrincipal MP) {
        this.MP = MP;
    }
    
    
    public static ResultSet resultado;

    
   
   
    
   public void ActualizarTabla(){
        
        
       model.setRowCount(0);
       jTable1.setModel(model);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV]");

        
       
     
       while (resultado.next())
       {     
             String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
          
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model.addRow(Datos);  
   
    }
       
       jTable1.setModel(model);
    
   
    
       
        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
          
    }
    
   
    public void ActualizarTabla1(){
        
        
       model1.setRowCount(0);
       jTable2.setModel(model1);
       
      
        try{
            
        
        resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV]");

        
       
     
       while (resultado.next())
       {     
             String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
              
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
    }
       
       jTable2.setModel(model1);
    
   
    
       
        
    }   catch (SQLException ex) {
      JOptionPane.showMessageDialog(null,ex.getMessage()); 
    }
        
          
    }
    
    
    public void Buscar1(){
     
        int index = cmbbusc1.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [No_Carne_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
            
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Carn√© de Trabajador No Encontrado");
            }

            break;

            case 2:
                
            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Nombres_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
             
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres de Trabajador No Encontrado");
            }

            break;
                
            case 3:
                
 try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Apellidos_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos de Trabajador No Encontrado");
            }
          
            break;
           
            case 4:
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [No_Cedula_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
      
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          

     }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. C√©dula de Trabajador No Encontrado");
            }
            

            break;
            
            case 5:
 try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Sexo_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          

     }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Sexo de Trabajador No Encontrado");
            }
                 
            break;
                
            case 6:
                
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Puesto_Trabajador] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Puesto de Trabajador No Encontrado");
            }

            break;
           
            case 7:

                
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Estado_Plan] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
            
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
               }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Estado de Trabajador No Encontrado");
            }
                 
                 
            break;
                
            case 8:
                
            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [ContadorT] = '"+Buscar+"'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Inasistencia de Trabajador No Encontrado");
            }

            break;
           
            default:

            break;

          
        
        }
        jTable2.setModel(model1);
        
        
    }
    
    
   
    public void Buscar(){
     
        int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [No_Carne_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Carn√© de Estudiante No Encontrado");
            }

            break;

            case 2:
                
            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Nombres_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);




                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres de Estudiante No Encontrado");
            }

            break;
                
            case 3:
                
  try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Apellidos_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos de Estudiante No Encontrado");
            }
          
            break;
           
            case 4:
                
                try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Sexo_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Sexo de Estudiante No Encontrado");
            }
            

            break;
            
            case 5:
 
                try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Facultad_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
             
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);




                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Facultad de Estudiante No Encontrado");
            }
                 
            break;
                
            case 6:
                
             try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Carrera_Estudiante] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);



                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Carrera de Estudiante No Encontrado");
            }

            break;
           
            case 7:

                
               try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Estado_Beca] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Estado de Estudiante No Encontrado");
            }
                 
                 
            break;
                
            case 8:
                
             try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [ContadorE] = '"+Buscar+"'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
          
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);



                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Inasistencia de Estudiante No Encontrado");
            }

            break;
           
            default:

            break;

          
        
        }
        jTable1.setModel(model);
        
        
    }
    
    
    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed

        Buscar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void txtbuscKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbuscKeyReleased
  int index = cmbbusc.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [No_Carne_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Carn√© de Estudiante No Encontrado");
            }

            break;

            case 2:
                
            try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Nombres_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);




                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres de Estudiante No Encontrado");
            }

            break;
                
            case 3:
                
  try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Apellidos_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos de Estudiante No Encontrado");
            }
          
            break;
           
            case 4:
                
                try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Sexo_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Sexo de Estudiante No Encontrado");
            }
            

            break;
            
            case 5:
 
                try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Facultad_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);




                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Facultad de Estudiante No Encontrado");
            }
                 
            break;
                
            case 6:
                
             try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Carrera_Estudiante] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
            
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);



                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Carrera de Estudiante No Encontrado");
            }

            break;
           
            case 7:

                
               try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [Estado_Beca] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
         
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Estado de Estudiante No Encontrado");
            }
                 
                 
            break;
                
            case 8:
                
             try{
                model.setRowCount(0);
                String Buscar = txtbusc.getText();
                resultado = Conexion.consulta("Select * from [dbo].[BecaAlimenticiaV] where [ContadorE] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
              String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              
              Sexo = resultado.getString(5);
              
           
              
              Datos [4]= Sexo;
              Datos [5]= resultado.getString(6);
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9)); 
              
              model.addRow(Datos);



                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Inasistencia de Estudiante No Encontrado");
            }

            break;
           
            default:

            break;

          
        
        }
        jTable1.setModel(model);
        
                   // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscKeyReleased

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        String Estado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
         

            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
            

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

        
        }
        else{
            btndelete.setEnabled(false);
         
        }
        
        if(evt.getClickCount()==2 && evt.getButton()==java.awt.event.MouseEvent.BUTTON1){           
        
        
       int fila = jTable1.getSelectedRow();
        if (fila > -1){
      if(evt.getClickCount()==2 && evt.getButton()==java.awt.event.MouseEvent.BUTTON1){
          int ID = 0;
          
         ID = Integer.parseInt(this.jTable1.getModel().getValueAt(fila, 0).toString());
         
         byte[] fileBytes;
         String query;
                 
         
         int ID1 = 0;
        
         try
                 {
         
         resultado = Conexion.consulta("Select [ID_Estudiante] from [dbo].[BecaAlimenticia] where [ID_BecaAlimenticia] = "+ID);
        
         while(resultado.next()){
             
             ID1 = resultado.getInt(1);
         }
         
                         query = "Select [Foto_Estudiante] from [dbo].[Estudiante] where [ID_Estudiante] = "+ID1;
                         Statement state = Conexion.con.createStatement();
                         ResultSet rs = state.executeQuery(query);
                         if (rs.next())
                        {
                                 fileBytes = rs.getBytes(1);
                                 ImageIcon n = null;
                                 try{
                                  n = new ImageIcon(fileBytes);
                               
                                 Image img = n.getImage();
                                 
                                 
                    Image newimg = img.getScaledInstance(289,292,java.awt.Image.SCALE_SMOOTH);
                    ImageIcon newIcon = new ImageIcon(newimg);
                    jLblFoto1.setIcon(newIcon);
                    
                      }catch(NullPointerException ex){
                               
                                 }
                                 
                        }        
                        
                 }
                 catch (SQLException e)
                 {
                         JOptionPane.showMessageDialog(null, "Error Al Mostrar Imagen","Error",JOptionPane.ERROR_MESSAGE);
                        
                 }
      }
        }
        }
           
            
        
       

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusLost
        
   String Estado, Becado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
         

            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
          
            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

           
        }
        else{
            btndelete.setEnabled(false);
          
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jTable1FocusLost

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed

       
           String Estado1;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
         
            Estado1 = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
           

            if("Activo".equalsIgnoreCase(Estado1)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado1)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete.setEnabled(false);
            
        }
        
        int fila = jTable1.getSelectedRow();

        int ID;
        String Nombre;
        int v=JOptionPane.NO_OPTION;
        String Estado;
        String Apellido;

        if (fila > -1){
            
            

            ID= Integer.parseInt(this.jTable1.getModel().getValueAt(fila, 0).toString());
            Apellido = ((String)this.jTable1.getModel().getValueAt(fila, 2));
            Nombre=((String)this.jTable1.getModel().getValueAt(fila, 1));
            Estado = ((String)this.jTable1.getModel().getValueAt(fila, 7));

           
            
            if("Activo".equalsIgnoreCase(Estado)){
                
                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar Beca al Estudiante "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
             
                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar Beca al Estudiante "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }

            if(v==JOptionPane.YES_OPTION){

                
                BecaAlimenticia.Activar_Desactivar_BecaAlimenticia(ID);
                ActualizarTabla();
            }
        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Estudiante a Activar/Desactivar", "Error", JOptionPane.ERROR_MESSAGE);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btndeleteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btndeleteFocusGained
        
        
          String Estado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
       

            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
            

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

           
        }
        else{
            btndelete.setEnabled(false);
          
        }       // TODO add your handling code here:
    }//GEN-LAST:event_btndeleteFocusGained

    private void btnshowallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowallActionPerformed
        ActualizarTabla();      // TODO add your handling code here:
    }//GEN-LAST:event_btnshowallActionPerformed

    private void btnprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprintActionPerformed
        // TODO add your handling code here:

        
//        File miDir = new File ("");
//        String reporte = miDir.getAbsolutePath()+"\\src\\iReport\\Ejecutivos.jasper";
//
//        JasperPrint jp = null;
//        try {
//            jp = JasperFillManager.fillReport(reporte, null,Conexion.con);
//        } catch (JRException ex) {
//            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        JasperViewer view = new JasperViewer(jp, false);
//        view.setTitle("Ejecutivos");
//        this.setVisible(false);
//        view.setVisible(true);
//        view.toFront();

       

    }//GEN-LAST:event_btnprintActionPerformed

    private void btncancel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel3ActionPerformed
        MP.setVisible(true);  
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel3ActionPerformed

    private void TabbedPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMousePressed
      
        // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneMousePressed

    private void TabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TabbedPaneStateChanged
       
         // TODO add your handling code here:
    }//GEN-LAST:event_TabbedPaneStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
           
      jTable1.setDefaultRenderer(Object.class, new FormatoTablaEstudiante());
      jTable2.setDefaultRenderer(Object.class, new FormatoTablaTrabajador());
      
        //this.setResizable(false);
        
        String [] Titulo = {"ID", "Nombres", "Apellidos", "No.Carn√©", 
             "Sexo", "Facultad", "Carrera", "Estado", "Inasistencias"};
        
       model.setColumnIdentifiers(Titulo);
       
       String [] Titulo1 = {"ID", "Nombres", "Apellidos", "No.Carn√©", "No. C√©dula",
             "Sexo", "Puesto", "Estado", "Inasistencias"};
        
       model1.setColumnIdentifiers(Titulo1);
      
           ActualizarTabla();
           ActualizarTabla1();
// TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    MP.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void btndeleteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btndeleteFocusLost
 
       String Estado, Becado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
           
            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
         

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

        }
        else{
            btndelete.setEnabled(false);
           
        }       // TODO add your handling code here:
    }//GEN-LAST:event_btndeleteFocusLost

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
  String Estado, Becado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
         
            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
        

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

        }
        else{
            btndelete.setEnabled(false);
          
        }      // TODO add your handling code here:
    }//GEN-LAST:event_jTable1FocusGained

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
      String Estado, Becado;

        int Fila = jTable1.getSelectedRow();

        if (Fila > -1){

            btndelete.setEnabled(true);
         

            Estado = ((String)this.jTable1.getModel().getValueAt(Fila, 7));
          

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete.setText("Desactivar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete.setText("Activar");
                btndelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

           
        }
       else{
            btndelete.setEnabled(false);
          
        }// TODO add your handling code here:
    }//GEN-LAST:event_jTable1MousePressed

    private void btnbuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar1ActionPerformed

        Buscar();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnbuscar1ActionPerformed

    private void txtbusc1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbusc1KeyReleased
   int index = cmbbusc1.getSelectedIndex()+1;

        switch(index){

            case 1:

            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [No_Carne_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
            
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. Carn√© de Trabajador No Encontrado");
            }

            break;

            case 2:
                
            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Nombres_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
             
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          


                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Nombres de Trabajador No Encontrado");
            }

            break;
                
            case 3:
                
 try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Apellidos_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Apellidos de Trabajador No Encontrado");
            }
          
            break;
           
            case 4:
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [No_Cedula_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
      
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          

     }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"No. C√©dula de Trabajador No Encontrado");
            }
            

            break;
            
            case 5:
 try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Sexo_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
          

     }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Sexo de Trabajador No Encontrado");
            }
                 
            break;
                
            case 6:
                
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Puesto_Trabajador] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
           
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Puesto de Trabajador No Encontrado");
            }

            break;
           
            case 7:

                
           try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [Estado_Plan] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
            
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
               }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Estado de Trabajador No Encontrado");
            }
                 
                 
            break;
                
            case 8:
                
            try{
                model1.setRowCount(0);
                String Buscar = txtbusc1.getText();
                resultado = Conexion.consulta("Select * from [dbo].[PlanAlimenticioV] where [ContadorT] like '%"+Buscar+"%'");

                while (resultado.next())
                {
              
            String [] Datos = new String [9]; 

             String Sexo;
 
              Datos [0]= String.valueOf(resultado.getInt(1));    
              Datos [1]= resultado.getString(2);
              Datos [2]= resultado.getString(3);
              Datos [3]= resultado.getString(4);
              Datos [4]= resultado.getString(5);
              
              Sexo = resultado.getString(6);
              
              
              Datos [5]= Sexo;
              Datos [6]= resultado.getString(7);
              Datos [7]= resultado.getString(8);
              Datos [8]= String.valueOf(resultado.getInt(9));
              
              model1.addRow(Datos);  
   
         

                }

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,"Inasistencia de Trabajador No Encontrado");
            }

            break;
           
            default:

            break;

          
        
        }
        jTable2.setModel(model1);
                 // TODO add your handling code here:
    }//GEN-LAST:event_txtbusc1KeyReleased

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
         

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
           
        }

        if(evt.getClickCount()==2 && evt.getButton()==java.awt.event.MouseEvent.BUTTON1){

            int fila = jTable2.getSelectedRow();
            if (fila > -1){
                if(evt.getClickCount()==2 && evt.getButton()==java.awt.event.MouseEvent.BUTTON1){
                    int ID = 0;

                    ID = Integer.parseInt(this.jTable2.getModel().getValueAt(fila, 0).toString());

                    
                   int ID1 = 0;
                    try
                    {
                   
                   resultado = Conexion.consulta("Select [ID_Trabajador] from [dbo].[PlanAlimenticio] where [ID_PlanAlimenticio] = "+ID);
                   
                   while(resultado.next()){
                       ID1 = resultado.getInt(1);
                   }
                   
                   byte[] fileBytes;
                    String query;
                    

                   
                        query = "Select [Foto_Trabajador] from [dbo].[Trabajador] where [ID_Trabajador] = "+ID1;
                        Statement state = Conexion.con.createStatement();
                        ResultSet rs = state.executeQuery(query);
                        if (rs.next())
                        {
                            fileBytes = rs.getBytes(1);
                            ImageIcon n = null;
                            try{
                                n = new ImageIcon(fileBytes);

                                Image img = n.getImage();

                                Image newimg = img.getScaledInstance(289,292,java.awt.Image.SCALE_SMOOTH);
                                ImageIcon newIcon = new ImageIcon(newimg);
                                jLblFoto2.setIcon(newIcon);

                            }catch(NullPointerException ex){

                            }

                        }

                    }
                    catch (SQLException e)
                    {
                        JOptionPane.showMessageDialog(null, "Error Al Mostrar Imagen","Error",JOptionPane.ERROR_MESSAGE);

                    }
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MousePressed

    private void jTable2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable2FocusGained

       String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2FocusGained

    private void jTable2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable2FocusLost
        String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        } // TODO add your handling code here:
    }//GEN-LAST:event_jTable2FocusLost

    private void btndelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndelete1ActionPerformed
 String Estado1;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado1 = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado1)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado1)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        }
        
        int fila = jTable2.getSelectedRow();

        int ID;
        String Nombre;
        int v=JOptionPane.NO_OPTION;
        String Estado;
        String Apellido;

        if (fila > -1){

            ID= Integer.parseInt(this.jTable2.getModel().getValueAt(fila, 0).toString());
            Apellido = ((String)this.jTable2.getModel().getValueAt(fila, 2));
            Nombre=((String)this.jTable2.getModel().getValueAt(fila, 1));
            Estado = ((String)this.jTable2.getModel().getValueAt(fila, 7));

            if("Activo".equalsIgnoreCase(Estado)){

                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Desactivar del Plan Alimenticio al Trabajador "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }
            if("Inactivo".equalsIgnoreCase(Estado)){

                v= JOptionPane.showConfirmDialog(this, "Est√° Seguro Que Desea Activar del Plan Alimenticio al Trabajador "+Nombre.trim()+" "+Apellido.trim()+"?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            }

            if(v==JOptionPane.YES_OPTION){

                PlanAlimenticio.Activar_Desactivar_PlanAlimenticio(ID);
                ActualizarTabla();
            }
        }

        else{

            JOptionPane.showMessageDialog(this, "Seleccione Un Trabajador a Activar/Desactivar", "Error", JOptionPane.ERROR_MESSAGE);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btndelete1ActionPerformed

    private void btndelete1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btndelete1FocusGained
 String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btndelete1FocusGained

    private void btndelete1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btndelete1FocusLost
       String Estado;

        int Fila = jTable2.getSelectedRow();

        if (Fila > -1){

            btndelete1.setEnabled(true);
          

            Estado = ((String)this.jTable2.getModel().getValueAt(Fila, 7));
       

            if("Activo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Desactivar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desactivar.png")));
            }
            if("Inactivo".equalsIgnoreCase(Estado)){
                btndelete1.setText("Activar");
                btndelete1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Activar.png")));
            }

         
        }
        else{
            btndelete1.setEnabled(false);
         
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btndelete1FocusLost

    private void btnshowall1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnshowall1ActionPerformed
        ActualizarTabla1();      // TODO add your handling code here:
    }//GEN-LAST:event_btnshowall1ActionPerformed

    private void btnprint1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnprint1ActionPerformed
        // TODO add your handling code here:

        //        File miDir = new File ("");
        //        String reporte = miDir.getAbsolutePath()+"\\src\\iReport\\Ejecutivos.jasper";
        //
        //        JasperPrint jp = null;
        //        try {
            //            jp = JasperFillManager.fillReport(reporte, null,Conexion.con);
            //        } catch (JRException ex) {
            //            Logger.getLogger(Reportes.class.getName()).log(Level.SEVERE, null, ex);
            //        }
        //        JasperViewer view = new JasperViewer(jp, false);
        //        view.setTitle("Ejecutivos");
        //        this.setVisible(false);
        //        view.setVisible(true);
        //        view.toFront();

    }//GEN-LAST:event_btnprint1ActionPerformed

    private void btncancel4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancel4ActionPerformed
        MP.setVisible(true);
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btncancel4ActionPerformed

    DefaultTableModel model1 = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
};
     public class FormatoTablaTrabajador extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
         
  if(String.valueOf(table.getValueAt(row,7)).equalsIgnoreCase("Inactivo"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }  
                     
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 } 
    
    DefaultTableModel model = new DefaultTableModel() {

    @Override
    public boolean isCellEditable(int row, int column) {
       //all cells false
       return false;
    }
};
     public class FormatoTablaEstudiante extends DefaultTableCellRenderer
{
 @Override
 public Component getTableCellRendererComponent
 (JTable table, Object value, boolean selected, boolean focused, int row, int column)
 {
         
  if(String.valueOf(table.getValueAt(row,7)).equalsIgnoreCase("Inactivo"))  {
      setForeground(Color.RED);
  }
   else { setForeground(Color.BLACK);
   }
  
  
                  
    
 super.getTableCellRendererComponent(table, value, selected, focused, row, column);
 return this;
 }
 }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BeneficiadosP.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new BeneficiadosP().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelVer;
    private javax.swing.JPanel PanelVer1;
    private org.edisoncor.gui.tabbedPane.TabbedPaneHeader TabbedPane;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btnbuscar1;
    private javax.swing.JButton btncancel3;
    private javax.swing.JButton btncancel4;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btndelete1;
    private javax.swing.JButton btnprint;
    private javax.swing.JButton btnprint1;
    private javax.swing.JButton btnshowall;
    private javax.swing.JButton btnshowall1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbbusc;
    private javax.swing.JComboBox cmbbusc1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLblFoto1;
    private javax.swing.JLabel jLblFoto2;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txtbusc;
    private javax.swing.JTextField txtbusc1;
    // End of variables declaration//GEN-END:variables
}
